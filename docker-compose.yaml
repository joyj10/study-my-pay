version: '3'
services:
  mysql:
    image: mysql:8.0                        # MySQL 8.0 이미지를 사용하여 컨테이너 생성
    networks:
      - mypay_network                       # 'mypay_network'라는 네트워크에 연결
    volumes:
      - ./db/conf.d:/etc/mysql/conf.d       # 로컬의 ./db/conf.d 디렉토리를 MySQL 설정 파일 경로에 마운트
      - ./db/data:/var/lib/mysql            # 로컬의 ./db/data 디렉토리를 MySQL 데이터 디렉토리에 마운트
      - ./db/initdb.d:/docker-entrypoint-initdb.d # 초기화 스크립트 디렉토리를 컨테이너에 마운트하여 DB 초기 설정
    env_file: .env                          # .env 파일을 사용하여 환경 변수를 설정
    ports:
      - "3306:3306"                         # 호스트의 3306 포트를 컨테이너 내부의 3306 포트로 매핑 (MySQL 기본 포트)
    environment:
      - TZ=Asia/Seoul                       # 타임존을 아시아/서울로 설정
      - MYSQL_ROOT_PASSWORD=rootpassword    # MySQL 루트 사용자 비밀번호 설정
      - MYSQL_USER=mysqluser                # MySQL 일반 사용자 이름 설정
      - MYSQL_PASSWORD=mysqlpw              # MySQL 일반 사용자 비밀번호 설정

  membership-service:
    image: mypay-membership-service:1.0.1  # mypay-membership-service:1.0.1 이미지를 사용하여 컨테이너 생성
    networks:
      - mypay_network                       # 'mypay_network'라는 네트워크에 연결
    ports:                                  # 컨테이너 내부 포트를 호스트 외부 포트에 매핑
      - "8081:8080"                         # 호스트의 8081 포트를 컨테이너 내부의 8080 포트와 매핑 (호스트의 8081로 요청이 들어오면 컨테이너의 8080으로 전달)
    depends_on:
      - mysql                               # mysql 서비스가 먼저 실행된 후 membership-service가 실행됨
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/my_pay?useSSL=false&allowPublicKeyRetrieval=true  # MySQL 데이터베이스 URL 설정
      SPRING_DATASOURCE_USERNAME: mysqluser  # 데이터베이스 사용자 이름
      SPRING_DATASOURCE_PASSWORD: mysqlpw  # 데이터베이스 사용자 비밀번호
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQLDialect  # Hibernate 사용을 위한 MySQL Dialect 설정
      SPRING_JPA_HIBERNATE_DDL_AUTO: update  # JPA의 DDL 설정으로 테이블 자동 업데이트

  banking-service:
    image: mypay-banking-service:1.0.0      # mypay-banking-service:1.0.0 이미지를 사용하여 컨테이너 생성
    networks:
      - mypay_network                       # 'mypay_network'라는 네트워크에 연결
    ports: # 컨테이너 내부 포트를 호스트 외부 포트에 매핑
      - "8082:8080"                         # 호스트의 8082 포트를 컨테이너 내부의 8080 포트와 매핑 (호스트의 8081로 요청이 들어오면 컨테이너의 8080으로 전달)
    depends_on:
      - mysql                               # mysql 서비스가 먼저 실행된 후 membership-service가 실행됨
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/my_pay?useSSL=false&allowPublicKeyRetrieval=true  # MySQL 데이터베이스 URL 설정
      SPRING_DATASOURCE_USERNAME: mysqluser  # 데이터베이스 사용자 이름
      SPRING_DATASOURCE_PASSWORD: mysqlpw  # 데이터베이스 사용자 비밀번호
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQLDialect  # Hibernate 사용을 위한 MySQL Dialect 설정
      SPRING_JPA_HIBERNATE_DDL_AUTO: update  # JPA의 DDL 설정으로 테이블 자동 업데이트

  money-service:
    image: mypay-money-service:1.0.0        # mypay-money-service:1.0.0 이미지를 사용하여 컨테이너 생성
    networks:
      - mypay_network                       # 'mypay_network'라는 네트워크에 연결
    ports: # 컨테이너 내부 포트를 호스트 외부 포트에 매핑
      - "8083:8080"                         # 호스트의 8083 포트를 컨테이너 내부의 8080 포트와 매핑 (호스트의 8081로 요청이 들어오면 컨테이너의 8080으로 전달)
    depends_on:
      - mysql                               # mysql 서비스가 먼저 실행된 후 membership-service가 실행됨
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/my_pay?useSSL=false&allowPublicKeyRetrieval=true  # MySQL 데이터베이스 URL 설정
      SPRING_DATASOURCE_USERNAME: mysqluser  # 데이터베이스 사용자 이름
      SPRING_DATASOURCE_PASSWORD: mysqlpw  # 데이터베이스 사용자 비밀번호
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQLDialect  # Hibernate 사용을 위한 MySQL Dialect 설정
      SPRING_JPA_HIBERNATE_DDL_AUTO: update  # JPA의 DDL 설정으로 테이블 자동 업데이트

networks:
  mypay_network:
    driver: bridge                           # 네트워크 드라이버를 bridge로 설정
