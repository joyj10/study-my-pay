version: '3'
services:
  axon-server:
    container_name: axon-server
    image: axoniq/axonserver:4.8.3-jdk-11-dev
    networks:
      - mypay_network
    ports:
      - "8024:8024"
      - "8124:8124"
    volumes:
      - axonserver-data:/axonserver/data
      - axonserver-events:/axonserver/events
      - axonserver-config:/axonserver/config:ro
  mysql:
    image: mysql:8.0                        # MySQL 8.0 이미지를 사용하여 컨테이너 생성
    networks:
      - mypay_network                       # 'mypay_network'라는 네트워크에 연결
    volumes:
      - ./db/conf.d:/etc/mysql/conf.d       # 로컬의 ./db/conf.d 디렉토리를 MySQL 설정 파일 경로에 마운트
      - ./db/data:/var/lib/mysql            # 로컬의 ./db/data 디렉토리를 MySQL 데이터 디렉토리에 마운트
      - ./db/initdb.d:/docker-entrypoint-initdb.d # 초기화 스크립트 디렉토리를 컨테이너에 마운트하여 DB 초기 설정
    env_file: .env                          # .env 파일을 사용하여 환경 변수를 설정
    ports:
      - "3306:3306"                         # 호스트의 3306 포트를 컨테이너 내부의 3306 포트로 매핑 (MySQL 기본 포트)
    environment:
      - TZ=Asia/Seoul                       # 타임존을 아시아/서울로 설정
      - MYSQL_ROOT_PASSWORD=rootpassword    # MySQL 루트 사용자 비밀번호 설정
      - MYSQL_USER=mysqluser                # MySQL 일반 사용자 이름 설정
      - MYSQL_PASSWORD=mysqlpw              # MySQL 일반 사용자 비밀번호 설정

  membership-service:
    image: mypay-membership-service:1.0.1  # mypay-membership-service:1.0.1 이미지를 사용하여 컨테이너 생성
    networks:
      - mypay_network                       # 'mypay_network'라는 네트워크에 연결
    ports:                                  # 컨테이너 내부 포트를 호스트 외부 포트에 매핑
      - "8081:8080"                         # 호스트의 8081 포트를 컨테이너 내부의 8080 포트와 매핑 (호스트의 8081로 요청이 들어오면 컨테이너의 8080으로 전달)
    depends_on:
      - mysql                               # mysql 서비스가 먼저 실행된 후 membership-service가 실행됨
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/my_pay?useSSL=false&allowPublicKeyRetrieval=true  # MySQL 데이터베이스 URL 설정
      - SPRING_DATASOURCE_USERNAME=mysqluser  # 데이터베이스 사용자 이름
      - SPRING_DATASOURCE_PASSWORD=mysqlpw    # 데이터베이스 사용자 비밀번호
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQLDialect  # Hibernate 사용을 위한 MySQL Dialect 설정
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update  # JPA의 DDL 설정으로 테이블 자동 업데이트
      - KAFKA_CLUSTERS_BOOTSTRAPSERVERS=kafka:29092
      - LOGGING_TOPIC=mypay.logging.out.stdout

  banking-service:
    image: mypay-banking-service:1.0.0      # mypay-banking-service:1.0.0 이미지를 사용하여 컨테이너 생성
    networks:
      - mypay_network                       # 'mypay_network'라는 네트워크에 연결
    ports: # 컨테이너 내부 포트를 호스트 외부 포트에 매핑
      - "8082:8080"                         # 호스트의 8082 포트를 컨테이너 내부의 8080 포트와 매핑 (호스트의 8081로 요청이 들어오면 컨테이너의 8080으로 전달)
    depends_on:
      - mysql                               # mysql 서비스가 먼저 실행된 후 membership-service가 실행됨
    environment:
      - AXON_AXONSERVER_SERVERS=axon-server:8124
      - AXON_SERIALIZER_EVENTS=jackson
      - AXON_SERIALIZER_MESSAGES=jackson
      - AXON_SERIALIZER_GENERAL=xstream
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/my_pay?useSSL=false&allowPublicKeyRetrieval=true  # MySQL 데이터베이스 URL 설정
      - SPRING_DATASOURCE_USERNAME=mysqluser  # 데이터베이스 사용자 이름
      - SPRING_DATASOURCE_PASSWORD=mysqlpw    # 데이터베이스 사용자 비밀번호
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQLDialect  # Hibernate 사용을 위한 MySQL Dialect 설정
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update  # JPA의 DDL 설정으로 테이블 자동 업데이트
      - KAFKA_CLUSTERS_BOOTSTRAPSERVERS=kafka:29092
      - LOGGING_TOPIC=mypay.logging.out.stdout
      - SERVICE_MEMBERSHIP_URL=http://membership-service:8080 # 내부적으로 membership 8080 사용중

  money-service:
    image: mypay-money-service:1.0.0        # mypay-money-service:1.0.0 이미지를 사용하여 컨테이너 생성
    networks:
      - mypay_network                       # 'mypay_network'라는 네트워크에 연결
    ports: # 컨테이너 내부 포트를 호스트 외부 포트에 매핑
      - "8083:8080"                         # 호스트의 8083 포트를 컨테이너 내부의 8080 포트와 매핑 (호스트의 8081로 요청이 들어오면 컨테이너의 8080으로 전달)
    depends_on:
      - mysql                               # mysql 서비스가 먼저 실행된 후 membership-service가 실행됨
    environment:
      - AXON_AXONSERVER_SERVERS=axon-server:8124
      - AXON_SERIALIZER_EVENTS=jackson
      - AXON_SERIALIZER_MESSAGES=jackson
      - AXON_SERIALIZER_GENERAL=xstream
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/my_pay?useSSL=false&allowPublicKeyRetrieval=true  # MySQL 데이터베이스 URL 설정
      - SPRING_DATASOURCE_USERNAME=mysqluser  # 데이터베이스 사용자 이름
      - SPRING_DATASOURCE_PASSWORD=mysqlpw    # 데이터베이스 사용자 비밀번호
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQLDialect  # Hibernate 사용을 위한 MySQL Dialect 설정
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update  # JPA의 DDL 설정으로 테이블 자동 업데이트
      - KAFKA_CLUSTERS_BOOTSTRAPSERVERS=kafka:29092
      - LOGGING_TOPIC=mypay.logging.out.stdout
      - TASK_TOPIC=mypay.task.topic
      - TASK_RESULT_TOPIC=mypay.task.result.topic
      - SERVICE_MEMBERSHIP_URL=http://membership-service:8080 # 내부적으로 membership 8080 사용중

  zookeeper:
    image: 'zookeeper:3.8'                  # 주키퍼 3.8 이미지를 사용하여 컨테이너 생성
    networks:
      - mypay_network                       # mypay_network라는 사용자 정의 네트워크에 연결
    ports:
      - '2181:2181'                         # 호스트의 2181 포트를 컨테이너의 2181 포트로 매핑
    environment: # 환경 변수 설정
      - ALLOW_ANONYMOUS_LOGIN=yes           # 익명 로그인을 허용
      - ZOO_TLS_CLIENT_AUTH=none            # TLS 클라이언트 인증 비활성화
      - ZOO_TLS_QUORUM_CLIENT_AUTH=none     # 클라이언트 인증이 필요 없는 상태로 설정

  kafka:
    image: 'bitnami/kafka:3.4.0'            # Bitnami의 Kafka 3.4.0 이미지를 사용하여 컨테이너 생성
    platform: linux/amd64
    networks:
      - mypay_network                       # mypay_network 사용자 정의 네트워크에 연결
    ports:
      - '9092:9092'                         # 호스트의 9092 포트를 컨테이너의 9092 포트로 매핑
    environment: # 환경 변수 설정
      - KAFKA_ENABLE_KRAFT=no               # KRaft 모드 비활성화 (주키퍼 사용)
      - KAFKA_BROKER_ID=1                   # Kafka 브로커의 고유 ID를 1로 설정
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181  # Kafka가 사용할 주키퍼의 주소와 포트(카프카 주피터 필수)
      - ALLOW_PLAINTEXT_LISTENER=yes        # 보안 연결 없이 평문으로 리스너 허용
      - KAFKA_CFG_LISTENERS=LC://kafka:29092,LX://kafka:9092  # Kafka 컨테이너에서 사용할 리스너 프로토콜과 포트 설정
      - KAFKA_CFG_ADVERTISED_LISTENERS=LC://kafka:29092,LX://${DOCKER_HOST_IP:-localhost}:9092  # 외부에서 접근 가능한 리스너의 주소와 포트 설정
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=LC:PLAINTEXT,LX:PLAINTEXT  # 리스너에 대한 보안 프로토콜 매핑 설정
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=LC  # 브로커 간 통신에 사용할 리스너 이름 지정
    depends_on:
      - zookeeper                           # zookeeper 컨테이너가 준비된 후에 실행되도록 설정

  kafka-ui:
    image: provectuslabs/kafka-ui           # Kafka UI를 제공하는 Provectus Labs의 이미지 사용
    container_name: kafka-ui                # 컨테이너 이름을 kafka-ui로 설정
    networks:
      - mypay_network                       # mypay_network 사용자 정의 네트워크에 연결
    ports:
      - "8989:8080"                         # 호스트의 8989 포트를 컨테이너의 8080 포트로 매핑
    restart: always                         # 컨테이너가 실패하면 자동으로 재시작
    depends_on:
      - kafka                               # Kafka 컨테이너가 준비된 후 실행되도록 설정
      - zookeeper                           # Zookeeper 컨테이너가 준비된 후 실행되도록 설정
    environment: # 환경 변수 설정
      - KAFKA_CLUSTERS_0_NAME=local         # Kafka 클러스터 이름을 local로 설정
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092  # Kafka 클러스터에 연결할 부트스트랩 서버 주소
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181  # Kafka 클러스터에 연결할 Zookeeper 주소

  logging-consumer:
    image: mypay-logging-consumer:1.0.0
    networks:
      - mypay_network
    restart: always
    depends_on:
      - kafka
      - zookeeper
    environment:
      - KAFKA_CLUSTERS_BOOTSTRAPSERVERS=kafka:29092
      - LOGGING_TOPIC=mypay.logging.out.stdout

  task-consumer:
    image: mypay-task-consumer:1.0.0
    networks:
      - mypay_network
    restart: always
    depends_on:
      - kafka
      - zookeeper
    environment:
      - KAFKA_CLUSTERS_BOOTSTRAPSERVERS=kafka:29092
      - LOGGING_TOPIC=mypay.logging.out.stdout
      - TASK_TOPIC=mypay.task.topic
      - TASK_RESULT_TOPIC=mypay.task.result.topic

  remittance-service:
    image: mypay-remittance-service:1.0.0
    networks:
      - mypay_network
    ports:
      - "8084:8080"
    restart: always
    depends_on:
      - kafka
      - mysql
    environment:
      - AXON_AXONSERVER_SERVERS=axon-server:8124
      - AXON_SERIALIZER_EVENTS=jackson
      - AXON_SERIALIZER_MESSAGES=jackson
      - AXON_SERIALIZER_GENERAL=xstream
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/my_pay?useSSL=false&allowPublicKeyRetrieval=true  # MySQL 데이터베이스 URL 설정
      - SPRING_DATASOURCE_USERNAME=mysqluser  # 데이터베이스 사용자 이름
      - SPRING_DATASOURCE_PASSWORD=mysqlpw    # 데이터베이스 사용자 비밀번호
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQLDialect  # Hibernate 사용을 위한 MySQL Dialect 설정
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update  # JPA의 DDL 설정으로 테이블 자동 업데이트
      - KAFKA_CLUSTERS_BOOTSTRAPSERVERS=kafka:29092
      - LOGGING_TOPIC=mypay.logging.out.stdout
      - SERVICE_MEMBERSHIP_URL=http://membership-service:8080 # 내부적으로 membership 8080 사용중
      - SERVICE_BANKING_URL=http://banking-service:8080
      - SERVICE_MONEY_URL=http://money-service:8080

volumes:
  axonserver-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/axon-server-se/data
  axonserver-events:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/axon-server-se/events
  axonserver-config:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/axon-server-se/config

networks:
  mypay_network:
    driver: bridge                           # 네트워크 드라이버를 bridge로 설정